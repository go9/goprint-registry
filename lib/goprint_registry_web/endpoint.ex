defmodule GoprintRegistryWeb.Endpoint do
  use Phoenix.Endpoint, otp_app: :goprint_registry
  use Plug.ErrorHandler

  # The session will be stored in the cookie and signed,
  # this means its contents can be read but not tampered with.
  # Set :encryption_salt if you would also like to encrypt it.
  @session_options [
    store: :cookie,
    key: "_goprint_registry_key",
    signing_salt: "KoauTNf3",
    same_site: "Lax"
  ]

  socket "/live", Phoenix.LiveView.Socket,
    websocket: [connect_info: [session: @session_options]],
    longpoll: [connect_info: [session: @session_options]]

  # WebSocket endpoint for desktop clients
  socket "/ws", GoprintRegistryWeb.DesktopSocket,
    websocket: [
      check_origin: false,
      compress: true,
      connect_info: [:peer_data, :x_headers]
    ],
    longpoll: false

  # Serve at "/" the static files from "priv/static" directory.
  #
  # When code reloading is disabled (e.g., in production),
  # the `gzip` option is enabled to serve compressed
  # static files generated by running `phx.digest`.
  plug Plug.Static,
    at: "/",
    from: :goprint_registry,
    gzip: not code_reloading?,
    only: GoprintRegistryWeb.static_paths()

  # Code reloading can be explicitly enabled under the
  # :code_reloader configuration of your endpoint.
  if code_reloading? do
    socket "/phoenix/live_reload/socket", Phoenix.LiveReloader.Socket
    plug Phoenix.LiveReloader
    plug Phoenix.CodeReloader
  end

  plug Plug.RequestId
  plug Plug.Telemetry, event_prefix: [:phoenix, :endpoint]

  plug Plug.Parsers,
    parsers: [:urlencoded, :multipart, :json],
    pass: ["*/*"],
    json_decoder: Phoenix.json_library(),
    length: 40 * 1024 * 1024

  plug Plug.MethodOverride
  plug Plug.Head
  plug Plug.Session, @session_options
  plug GoprintRegistryWeb.Router

  @impl Plug.ErrorHandler
  def handle_errors(conn, %{kind: _kind, reason: %Plug.Parsers.RequestTooLargeError{} = _err, stack: _stack}) do
    # Return JSON for API routes, simple text elsewhere
    if String.starts_with?(conn.request_path || "", "/api") do
      conn
      |> put_resp_content_type("application/json")
      |> send_resp(413, "{\"error\":\"Request payload too large (max 40MB)\"}")
    else
      send_resp(conn, 413, "Payload too large, max 40MB")
    end
  end
end
